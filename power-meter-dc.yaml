esphome:
  name: power-meter-dc
  friendly_name: Power Meter DC
esp32:
  board: esp32dev
  framework:
    type: arduino
#mdns:
#  disabled: true
# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
#  encryption:
ota:
  - platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  passive_scan: false
  manual_ip:
    static_ip: 192.168.99.112
    gateway: 192.168.99.1
    subnet: 255.255.255.0
    dns1: 192.168.99.100

uart:
    id: uart_bus
    tx_pin: 1 # Yellow Wire - MPPT UART Transmit
    rx_pin: 3 # Green Wire - MPPT UART Receive
    rx_buffer_size: 128
    baud_rate: 9600
    parity: NONE
    stop_bits: 1
modbus:
    send_wait_time: 300ms
    id: modbus1
#    flow_control_pin: 
#    uart_id: 
# Timers configuration
time:
  - platform: sntp
    id: sntp_time1
    on_time:
      # Every Month at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        then:
          - sensor.integration.reset: total_energy_month_DC3 #Reset power integrator
          - sensor.integration.reset: total_energy_month_DC4 #Reset power integrator
      # Every Week at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: MON
        then:
          - sensor.integration.reset: total_energy_week_DC3 #Reset power integrator
          - sensor.integration.reset: total_energy_week_DC4 #Reset power integrator
      # Every Day at specified hour
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.integration.reset: total_energy_day_DC3 #Reset power integrator
          - sensor.integration.reset: total_energy_day_DC4 #Reset power integrator


button:
  - platform: restart
    name: "Restart"
  - platform: template
    name: "kWh reset DC3"
    on_press:
      - sensor.integration.reset: total_energy_month_DC3 #Reset power integrator
      - sensor.integration.reset: total_energy_week_DC3 #Reset power integrator
      - sensor.integration.reset: total_energy_day_DC3 #Reset power integrator
  - platform: template
    name: "kWh reset DC4"
    on_press:
      - sensor.integration.reset: total_energy_month_DC4 #Reset power integrator
      - sensor.integration.reset: total_energy_week_DC4 #Reset power integrator
      - sensor.integration.reset: total_energy_day_DC4 #Reset power integrator


  #######    PZEM CONFIG  fast sensor  #####
sensor:
#----------------------------------------- PZEM-DC3 #######   
  - platform: pzemdc
    id: pzemdc3
    address: 3
    modbus_id: modbus1
    voltage:
      id: V_DC3
      internal: true
    current:
      id: A_DC3
      internal: true
    power:
      id: W_DC3
      internal: true
    update_interval: 1s
#----------------------------------------- PZEM-DC4 #######   
  - platform: pzemdc
    id: pzemdc4
    address: 4
    modbus_id: modbus1
    voltage:
      id: V_DC4
      internal: true
    current:
      id: A_DC4
      internal: true
    power:
      id: W_DC4
      internal: true
    update_interval: 1s
    
################################################################################
#                         Slow sensors for Home assistant                      #
################################################################################
#------------------------------------------------------------------------------------# PZEM DC3      
  - platform: template #########################
    name: "DC3 Voltage"
    lambda: |-
      {
        return (id(V_DC3).state);
      }
    device_class: voltage
    update_interval: 5s
  
  - platform: template 
    name: "DC3 Current"
    lambda: |-
      {
        return (id(A_DC3).state);
      }
    device_class: current
    update_interval: 5s
  
  - platform: template 
    name: "DC3 Power"
    lambda: |-
      {
        return (id(W_DC3).state);
      }
    device_class: power
    update_interval: 5s

  - platform: template 
    name: "DC3 Charge"
    id: C_DC3
    lambda: |-
      {
        return (id(W_DC4).state) / (id(V_DC3).state);
      }
    device_class: current
    update_interval: 5s

  - platform: template 
    name: "DC3 Charge Power"
    lambda: |-
      {
        return (id(C_DC3).state) * (id(V_DC3).state);
      }
    device_class: power
    update_interval: 5s   

  - platform: integration
    name: "Daily Consumption_DC3"
    id: "total_energy_day_DC3"
    sensor: W_DC3
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Weekly Consumption_DC3"
    id: "total_energy_week_DC3"
    sensor: W_DC3
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Monthly Consumption_DC3"
    id: "total_energy_month_DC3"
    sensor: W_DC3
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001
  
  - platform: integration
    name: "DC3_Energy"
    id: "total_energy_DC3"
    sensor: W_DC3
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 1
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001
  #-----------------------------------------------------------------------#PZEM DC4
  - platform: template 
    name: "DC4 Voltage"
    lambda: |-
      {
        return (id(V_DC4).state);
      }
    device_class: voltage
    update_interval: 5s  
  - platform: template 
    name: "DC4 Current"
    lambda: |-
      {
        return (id(A_DC4).state);
      }
    device_class: current
    update_interval: 5s
   
  - platform: template 
    name: "DC4 Power"
    lambda: |-
      {
        return (id(W_DC4).state);
      }
    device_class: power
    update_interval: 5s

  - platform: integration
    name: "Daily Consumption_DC4"
    id: "total_energy_day_DC4"
    sensor: W_DC4
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Weekly Consumption_DC4"
    id: "total_energy_week_DC4"
    sensor: W_DC4
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Monthly Consumption_DC4"
    id: "total_energy_month_DC4"
    sensor: W_DC4
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
     - multiply: 0.001

  - platform: integration
    name: "DC4_Energy"
    id: "total_energy_DC4"
    sensor: W_DC4
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 1
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001
      
# Wifi signal sensors
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi signal dB"
    id: wifi_signal_db
    update_interval: 10s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    device_class: ""
    name: "WiFi signal"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

# Other information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID

binary_sensor:
  - platform: status
    name: "status" 
status_led:
  pin:
    number: GPIO2
    inverted: false





