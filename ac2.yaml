esphome:
  name: ac2
  friendly_name: AC2

esp8266:
  board: esp01_1m

# Enable logging
logger:
  level: debug
  baud_rate: 0
# Enable Home Assistant API
api:
#  encryption:
#    key: "tKFndbzc32gUUJMgcS/Y4wlaxMdRmHZfxKaxzEo0hRk="

ota:
  - platform: esphome

#web_server:
#  port: 80

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.99.111
    gateway: 192.168.99.1
    subnet: 255.255.255.0
    dns1: 192.168.99.100
  power_save_mode: none
  output_power: 15

time:
  - platform: sntp
    id: sntp_time1
    on_time:
      # Every Month at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        then:
          - sensor.integration.reset: total_energy_month #Reset power integrator
      # Every Week at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: MON
        then:
          - sensor.integration.reset: total_energy_week #Reset power integrator
      # Every Day at specified hour
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.integration.reset: total_energy_day #Reset power integrator

# Other information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: SSID
status_led:
  pin:
    number: GPIO2
    inverted: True          
button:
  - platform: restart
    name: "Restart"
  - platform: template
    name: "kWh reset"
    on_press:
      - sensor.integration.reset: total_energy_month #Reset power integrator
      - sensor.integration.reset: total_energy_week #Reset power integrator
      - sensor.integration.reset: total_energy_day #Reset power integrator
      - sensor.integration.reset: total_energy #Reset power integrator

binary_sensor:
  - platform: status
    name: "Status" 
#switch:
#  - platform: uart
#    uart_id: PZEM
#    id: reset_AC1
#    name: "AC-1 Energy Reset"
#    data: [0x01, 0x42, 0x80, 0x11]
uart:
  id: PZEM
  rx_pin: 1
  tx_pin: 3
  baud_rate: 9600
  data_bits: 8
  parity: none
  stop_bits: 1
#  rx_buffer_size: 512
modbus:
  send_wait_time: 250ms
  id: modbus1
sensor:
  - platform: pzemac
    address: 1
    modbus_id: modbus1
    voltage:
     id: V
    current:
     id: A
    power:
     id: W
    frequency:
     id: Hz
    power_factor:
     id: pf
    energy:
      id: Kwh
      unit_of_measurement: kWh
      accuracy_decimals: 3
      filters:
      - multiply: 0.001     
    update_interval: 1s

  - platform: template #########################
    name: "Voltage"
    lambda: |-
      {
        return (id(V).state);
      }
    device_class: voltage
    update_interval: 5s

  - platform: template 
    name: "Current"
    lambda: |-
      {
        return (id(A).state);
      }
    device_class: current
    update_interval: 5s

  - platform: template 
    name: "Power"
    lambda: |-
      {
        return (id(W).state);
      }
    device_class: power
    update_interval: 5s

  - platform: template 
    name: "Frequency"
    lambda: |-
      {
        return (id(Hz).state);
      }
    device_class: frequency
    update_interval: 5s    

  - platform: template 
    name: "Power Factor"
    lambda: |-
      {
        return (id(pf).state);
      }
    device_class: power_factor
    update_interval: 5s   

  - platform: integration
    name: "Daily Consumption"
    id: "total_energy_day"
    sensor: W
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Weekly Consumption"
    id: "total_energy_week"
    sensor: W
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Monthly Consumption"
    id: "total_energy_month"
    sensor: W
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 2
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Energy"
    id: "total_energy"
    sensor: W
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 1
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  # Wifi signal sensors
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    device_class: ""
    name: "WiFi signal"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

