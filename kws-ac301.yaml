esphome:
  name: kws-ac301
  friendly_name: KWS-AC301

esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate : 0
# Enable Home Assistant API
api:
#  encryption:
#    key: "Obh2FLTax8GB5ovuEkHPH6ykCi8/LBQxtZY6p0va/b8="

ota:
  - platform: esphome
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.99.113
    gateway: 192.168.99.1
    subnet: 255.255.255.0
    dns1: 192.168.99.1
    dns2: 8.8.8.8
  #output_power: 15 
  #power_save_mode: none
 

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
  #  ssid: "Esphome-Web-6B68C4"
  #  password: "EFFNiCghfroV"


#captive_portal:

button:
  - platform: restart
    name: "Ac301 Restart"

uart:
  id: PZEM
  rx_pin: 3
  tx_pin: 1
  baud_rate: 9600
  data_bits: 8
  parity: none
  stop_bits: 1
  rx_buffer_size: 512

modbus:
    send_wait_time: 250ms
    id: modbus1
#    flow_control_pin: 
#    uart_id: 
modbus_controller:
  - id: Power_Meter
    address: 2   ## address of the ModBUS slave device on the bus
    modbus_id: modbus1
    command_throttle: 0ms
    setup_priority: -10
    update_interval: 1s    

sensor:
  
  ###     KWS-AC301 config    ####
  - platform: modbus_controller
    modbus_controller_id: Power_Meter
    #name: "KWS_AC301-Volt"
    id: Volt
    custom_command: [ 0x02, 0x03, 0x0, 0x0E, 0x00, 0x01, 0xE5, 0xFA]
    value_type: U_WORD
    unit_of_measurement: V
    accuracy_decimals: 0
    filters:
      - multiply: 0.1
                      
  
  - platform: modbus_controller
    modbus_controller_id: Power_Meter
    #name: "KWS_AC301-Amp"
    id: Amp
    custom_command: [ 0x02, 0x03, 0x0, 0x0F, 0x00, 0x01, 0xB4, 0x3A]
    value_type: U_WORD
    unit_of_measurement: A
    accuracy_decimals: 3
    filters:
      - multiply: 0.001

  - platform: modbus_controller
    modbus_controller_id: Power_Meter
    #name: "KWS_AC301-Watt"
    id: watt
    custom_command: [ 0x02, 0x03, 0x0, 0x11, 0x00, 0x01, 0xD4, 0x3C]
    value_type: U_WORD
    unit_of_measurement: W
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: Power_Meter
    #name: "KWS_AC301-PF"
    id: PF
    custom_command: [ 0x02, 0x03, 0x0, 0x1D, 0x00, 0x01, 0x14, 0x3F]
    value_type: U_WORD
    #unit_of_measurement: 
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: Power_Meter
    #name: "KWS_AC301-HZ"
    id: HZ
    custom_command: [ 0x02, 0x03, 0x00, 0x02, 0x00, 0x01, 0x25, 0xF9]
    value_type: U_WORD
    unit_of_measurement: Hz
    accuracy_decimals: 1
    filters:
      - multiply: 0.01
    
  - platform: modbus_controller
    modbus_controller_id: Power_Meter
    #name: "KWS_AC301-KWH"
    id: KWH
    custom_command: [ 0x02, 0x03, 0x0, 0x17, 0x00, 0x01, 0x34, 0x3D]
    value_type: U_WORD
    unit_of_measurement: Kwh
    accuracy_decimals: 3
    filters:
      - multiply: 0.001


################################################################################
#                         Slow sensors for Home assistant                      #
################################################################################

  - platform: template #########################
    name: "AC301 Voltage "
    lambda: |-
      if (id(Volt).state) {
        return (id(Volt).state);
      } else {
        return 0;
      }
    unit_of_measurement: V
    icon: "mdi:alpha-v-circle"
    update_interval: 5s

  - platform: template #########################
    name: "AC301 Current "
    lambda: |-
      if (id(Amp).state) {
        return (id(Amp).state);
      } else {
        return 0;
      }
    unit_of_measurement: A
    icon: "mdi:alpha-a-circle"
    update_interval: 5s
  
  - platform: template #########################
    name: "AC301 Power "
    lambda: |-
      if (id(watt).state) {
        return (id(watt).state);
      } else {
        return 0;
      }
    unit_of_measurement: W 
    icon: "mdi:alpha-w-circle"
    update_interval: 5s

  - platform: template #########################
    name: "AC301 Total Kwh "
    lambda: |-
      if (id(KWH).state) {
        return (id(KWH).state);
      } else {
        return 0;
      }
    unit_of_measurement: KWH 
    icon: "mdi:alpha-w-circle"
    update_interval: 5s

  - platform: integration
    name: "Daily Consumption_AC301"
    id: "total_energy_day_AC301"
    sensor: watt
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 3
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Weekly Consumption_AC301"
    id: "total_energy_week_AC301"
    sensor: watt
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 3
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001

  - platform: integration
    name: "Monthly Consumption_AC301"
    id: "total_energy_month_AC301"
    sensor: watt
    time_unit: h
    device_class: "energy"
    state_class: "total_increasing"
    unit_of_measurement: kWh
    accuracy_decimals: 3
    restore: true #If true, save the reading to the flash memory to prevent data loss in case of power loss
    filters:
      - multiply: 0.001
  
# Timers configuration
time:
  - platform: sntp
    id: sntp_time1
    on_time:
      # Every Month at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_month: 1
        then:
          - sensor.integration.reset: total_energy_month_AC301 #Reset power integrator
     
      # Every Week at specified day
      - seconds: 0
        minutes: 0
        hours: 0
        days_of_week: MON
        then:
          - sensor.integration.reset: total_energy_week_AC301 #Reset power integrator
     
      # Every Day at specified hour
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.integration.reset: total_energy_day_AC301 #Reset power integrator
        
    
      
  
# Other information
text_sensor:
  - platform: wifi_info
    ip_address:
      name: AC301 IP Address
    ssid:
      name: AC301 SSID
binary_sensor:
  - platform: status
    name: "AC301 meter Status" 